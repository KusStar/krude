apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'com.google.devtools.ksp'
apply plugin: 'com.jaredsburrows.license'
apply plugin: 'org.jetbrains.kotlin.plugin.compose'

ksp {
    arg('room.schemaLocation', "$projectDir/schemas")
}

kotlin {
    jvmToolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
    jvmToolchain(17)
}

java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
    }
}

android {

    buildFeatures {
        aidl true
        viewBinding true
        compose true
        buildConfig true
    }

    defaultConfig {
        applicationId "com.kuss.krude"
        minSdkVersion 28
        targetSdkVersion 34
        compileSdk 34
        versionCode 3
        versionName "1.0.0"
        vectorDrawables {
            useSupportLibrary true
        }

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
    }

    signingConfigs {
        debug {
            storeFile file('./debug-key')
            storePassword 'debugdebug'
            keyAlias 'debugdebug'
            keyPassword 'debugdebug'
        }
        krude {
            storeFile file('./keystore')
            storePassword 'krudekrude'
            keyAlias 'key0'
            keyPassword 'krudekrude'
        }
    }

    buildTypes {
        release {
            shrinkResources true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.krude
        }
        prerelease {
            shrinkResources false
            minifyEnabled false
            signingConfig signingConfigs.krude
            lintOptions {
                checkReleaseBuilds false
            }
        }
        debug {
            signingConfig signingConfigs.debug
            applicationIdSuffix ".debug"
            versionNameSuffix '.debug'
        }
    }

    namespace 'com.kuss.krude'

    packaging {
        resources {
            excludes += '/META-INF/{AL2.0,LGPL2.1}'
        }
    }
    dynamicFeatures = [':scanner']

    // applicationVariants are e.g. debug, release
    android.applicationVariants.configureEach { variant ->
        // assign different version code for each output
        variant.outputs.each { output ->
            def versionCodes = ['armeabi-v7a': 2, 'arm64-v8a': 3, 'x86': 4, 'x86_64': 5]
            def abi = output.getFilter(com.android.build.OutputFile.ABI)
            output.versionCodeOverride = versionCodes.get(abi, 0) * 1000000 + android.defaultConfig.versionCode
        }
    }
}

composeCompiler {
    enableStrongSkippingMode = true
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    // Fix Android 14 debug lag
    debugImplementation(libs.wytrace)
    prereleaseImplementation(libs.wytrace.no.impl)
    releaseImplementation(libs.wytrace.no.impl)
    implementation libs.kotlin.stdlib
    implementation libs.androidx.lifecycle.runtime.compose
    implementation libs.androidx.lifecycle.viewmodel.compose
    implementation(libs.core.splashscreen)
    implementation libs.activity.compose
    // room
    implementation libs.room.runtime
    ksp libs.androidx.room.compiler
    implementation libs.datastore.preferences
    // compose
    implementation platform(libs.compose.bom)
    implementation libs.compose.runtime.android
    implementation libs.compose.ui
    implementation libs.compose.ui.graphics
    implementation libs.compose.ui.tooling.preview
    implementation libs.material3
    implementation libs.material.icons.extended
    debugImplementation libs.compose.ui.tooling
    debugImplementation libs.compose.ui.test.manifest
    // third part
    implementation libs.gson
    implementation libs.compose.settings.ui.tiles
    implementation libs.coil.compose
    implementation libs.tinypinyin
    implementation libs.appiconloader
    implementation libs.fuzzywuzzy
    implementation libs.compose.shimmer
    implementation libs.compose.calendar
    implementation libs.timber
    implementation libs.compose.preference
    implementation libs.compose.wheel.picker
    implementation libs.cascade.compose
    implementation libs.lazycolumnscrollbar
    // extensions
    implementation libs.accompanist.permissions
    implementation libs.hiddenapibypass
    implementation libs.shizuku.api
    implementation libs.shizuku.provider
}